# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: osmosis/tokenfactory/v1beta1/authorityMetadata.proto, osmosis/tokenfactory/v1beta1/genesis.proto, osmosis/tokenfactory/v1beta1/params.proto, osmosis/tokenfactory/v1beta1/query.proto, osmosis/tokenfactory/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MsgCreateDenom(betterproto.Message):
    """
    MsgCreateDenom is the sdk.Msg type for allowing an account to create a new
    denom. It requires a sender address and a subdenomination. The
    (sender_address, sub_denomination) pair must be unique and cannot be re-
    used. The resulting denom created is `factory/{creator
    address}/{subdenom}`. The resultant denom's admin is originally set to be
    the creator, but this can be changed later. The token denom does not
    indicate the current admin.
    """

    sender: str = betterproto.string_field(1)
    # subdenom can be up to 44 "alphanumeric" characters long.
    subdenom: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgCreateDenomResponse(betterproto.Message):
    """
    MsgCreateDenomResponse is the return value of MsgCreateDenom It returns the
    full string of the newly created denom
    """

    new_token_denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgMint(betterproto.Message):
    """
    MsgMint is the sdk.Msg type for allowing an admin account to mint more of a
    token.  For now, we only support minting to the sender account
    """

    sender: str = betterproto.string_field(1)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgMintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgBurn(betterproto.Message):
    """
    MsgBurn is the sdk.Msg type for allowing an admin account to burn a token.
    For now, we only support burning from the sender account.
    """

    sender: str = betterproto.string_field(1)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgBurnResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeAdmin(betterproto.Message):
    """
    MsgChangeAdmin is the sdk.Msg type for allowing an admin account to
    reassign adminship of a denom to a new account
    """

    sender: str = betterproto.string_field(1)
    denom: str = betterproto.string_field(2)
    new_admin: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DenomAuthorityMetadata(betterproto.Message):
    """
    DenomAuthorityMetadata specifies metadata for addresses that have specific
    capabilities over a token factory denom. Right now there is only one Admin
    permission, but is planned to be extended to the future.
    """

    # Can be empty for no admin, or a valid osmosis address
    admin: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params holds parameters for the tokenfactory module"""

    denom_creation_fee: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomAuthorityMetadataRequest(betterproto.Message):
    denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomAuthorityMetadataResponse(betterproto.Message):
    authority_metadata: "DenomAuthorityMetadata" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomsFromCreatorRequest(betterproto.Message):
    creator: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomsFromCreatorResponse(betterproto.Message):
    denoms: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the tokenfactory module's genesis state."""

    # params defines the paramaters of the module.
    params: "Params" = betterproto.message_field(1)
    factory_denoms: List["GenesisDenom"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GenesisDenom(betterproto.Message):
    denom: str = betterproto.string_field(1)
    authority_metadata: "DenomAuthorityMetadata" = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def create_denom(
        self, *, sender: str = "", subdenom: str = ""
    ) -> "MsgCreateDenomResponse":

        request = MsgCreateDenom()
        request.sender = sender
        request.subdenom = subdenom

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom",
            request,
            MsgCreateDenomResponse,
        )

    async def mint(
        self, *, sender: str = "", amount: "___cosmos_base_v1_beta1__.Coin" = None
    ) -> "MsgMintResponse":

        request = MsgMint()
        request.sender = sender
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Msg/Mint", request, MsgMintResponse
        )

    async def burn(
        self, *, sender: str = "", amount: "___cosmos_base_v1_beta1__.Coin" = None
    ) -> "MsgBurnResponse":

        request = MsgBurn()
        request.sender = sender
        if amount is not None:
            request.amount = amount

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Msg/Burn", request, MsgBurnResponse
        )

    async def change_admin(
        self, *, sender: str = "", denom: str = "", new_admin: str = ""
    ) -> "MsgChangeAdminResponse":

        request = MsgChangeAdmin()
        request.sender = sender
        request.denom = denom
        request.new_admin = new_admin

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin",
            request,
            MsgChangeAdminResponse,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def denom_authority_metadata(
        self, *, denom: str = ""
    ) -> "QueryDenomAuthorityMetadataResponse":

        request = QueryDenomAuthorityMetadataRequest()
        request.denom = denom

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/DenomAuthorityMetadata",
            request,
            QueryDenomAuthorityMetadataResponse,
        )

    async def denoms_from_creator(
        self, *, creator: str = ""
    ) -> "QueryDenomsFromCreatorResponse":

        request = QueryDenomsFromCreatorRequest()
        request.creator = creator

        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/DenomsFromCreator",
            request,
            QueryDenomsFromCreatorResponse,
        )


class MsgBase(ServiceBase):
    async def create_denom(
        self, sender: str, subdenom: str
    ) -> "MsgCreateDenomResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def mint(
        self, sender: str, amount: "___cosmos_base_v1_beta1__.Coin"
    ) -> "MsgMintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def burn(
        self, sender: str, amount: "___cosmos_base_v1_beta1__.Coin"
    ) -> "MsgBurnResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_admin(
        self, sender: str, denom: str, new_admin: str
    ) -> "MsgChangeAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_denom(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "sender": request.sender,
            "subdenom": request.subdenom,
        }

        response = await self.create_denom(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_mint(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "sender": request.sender,
            "amount": request.amount,
        }

        response = await self.mint(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_burn(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "sender": request.sender,
            "amount": request.amount,
        }

        response = await self.burn(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_admin(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "sender": request.sender,
            "denom": request.denom,
            "new_admin": request.new_admin,
        }

        response = await self.change_admin(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom": grpclib.const.Handler(
                self.__rpc_create_denom,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateDenom,
                MsgCreateDenomResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Msg/Mint": grpclib.const.Handler(
                self.__rpc_mint,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMint,
                MsgMintResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Msg/Burn": grpclib.const.Handler(
                self.__rpc_burn,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgBurn,
                MsgBurnResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin": grpclib.const.Handler(
                self.__rpc_change_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeAdmin,
                MsgChangeAdminResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def denom_authority_metadata(
        self, denom: str
    ) -> "QueryDenomAuthorityMetadataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def denoms_from_creator(
        self, creator: str
    ) -> "QueryDenomsFromCreatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_denom_authority_metadata(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "denom": request.denom,
        }

        response = await self.denom_authority_metadata(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_denoms_from_creator(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "creator": request.creator,
        }

        response = await self.denoms_from_creator(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.tokenfactory.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Query/DenomAuthorityMetadata": grpclib.const.Handler(
                self.__rpc_denom_authority_metadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDenomAuthorityMetadataRequest,
                QueryDenomAuthorityMetadataResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Query/DenomsFromCreator": grpclib.const.Handler(
                self.__rpc_denoms_from_creator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDenomsFromCreatorRequest,
                QueryDenomsFromCreatorResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
